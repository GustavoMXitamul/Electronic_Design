
Parcial1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a28  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08000ae8  08000ae8  00010ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b1c  08000b1c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000b1c  08000b1c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b1c  08000b1c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b1c  08000b1c  00010b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b20  08000b20  00010b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000b24  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000004  08000b28  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000b28  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000487  00000000  00000000  0002006f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001bb  00000000  00000000  000204f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000068  00000000  00000000  000206b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000046  00000000  00000000  00020720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000fbe  00000000  00000000  00020766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000853  00000000  00000000  00021724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003f6e  00000000  00000000  00021f77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000100  00000000  00000000  00025ee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00025fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000ad0 	.word	0x08000ad0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08000ad0 	.word	0x08000ad0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <set_time>:
void formato_hora();

// Tabla de búsqueda para la función decoder
const uint8_t decoder_table[] = {cero, uno, dos, tres, cuatro, cinco, seis, siete, ocho, nueve};

void set_time(uint8_t hour_decimal, uint8_t hour_unit, uint8_t minute_decimal, uint8_t minute_unit, uint8_t second_decimal, uint8_t second_unit) {
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	0005      	movs	r5, r0
 8000228:	000c      	movs	r4, r1
 800022a:	0010      	movs	r0, r2
 800022c:	0019      	movs	r1, r3
 800022e:	1dfb      	adds	r3, r7, #7
 8000230:	1c2a      	adds	r2, r5, #0
 8000232:	701a      	strb	r2, [r3, #0]
 8000234:	1dbb      	adds	r3, r7, #6
 8000236:	1c22      	adds	r2, r4, #0
 8000238:	701a      	strb	r2, [r3, #0]
 800023a:	1d7b      	adds	r3, r7, #5
 800023c:	1c02      	adds	r2, r0, #0
 800023e:	701a      	strb	r2, [r3, #0]
 8000240:	1d3b      	adds	r3, r7, #4
 8000242:	1c0a      	adds	r2, r1, #0
 8000244:	701a      	strb	r2, [r3, #0]
    watch.hour_decimal = hour_decimal;
 8000246:	4b0f      	ldr	r3, [pc, #60]	; (8000284 <set_time+0x64>)
 8000248:	1dfa      	adds	r2, r7, #7
 800024a:	7812      	ldrb	r2, [r2, #0]
 800024c:	701a      	strb	r2, [r3, #0]
    watch.hour_unit = hour_unit;
 800024e:	4b0d      	ldr	r3, [pc, #52]	; (8000284 <set_time+0x64>)
 8000250:	1dba      	adds	r2, r7, #6
 8000252:	7812      	ldrb	r2, [r2, #0]
 8000254:	705a      	strb	r2, [r3, #1]
    watch.minute_decimal = minute_decimal;
 8000256:	4b0b      	ldr	r3, [pc, #44]	; (8000284 <set_time+0x64>)
 8000258:	1d7a      	adds	r2, r7, #5
 800025a:	7812      	ldrb	r2, [r2, #0]
 800025c:	709a      	strb	r2, [r3, #2]
    watch.minute_unit = minute_unit;
 800025e:	4b09      	ldr	r3, [pc, #36]	; (8000284 <set_time+0x64>)
 8000260:	1d3a      	adds	r2, r7, #4
 8000262:	7812      	ldrb	r2, [r2, #0]
 8000264:	70da      	strb	r2, [r3, #3]
    watch.second_decimal = second_decimal;
 8000266:	4a07      	ldr	r2, [pc, #28]	; (8000284 <set_time+0x64>)
 8000268:	2318      	movs	r3, #24
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	7113      	strb	r3, [r2, #4]
    watch.second_unit = second_unit;
 8000270:	4b04      	ldr	r3, [pc, #16]	; (8000284 <set_time+0x64>)
 8000272:	221c      	movs	r2, #28
 8000274:	18ba      	adds	r2, r7, r2
 8000276:	7812      	ldrb	r2, [r2, #0]
 8000278:	715a      	strb	r2, [r3, #5]
}
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	46bd      	mov	sp, r7
 800027e:	b002      	add	sp, #8
 8000280:	bdb0      	pop	{r4, r5, r7, pc}
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	20000024 	.word	0x20000024

08000288 <main>:

int main(void)
{
 8000288:	b5b0      	push	{r4, r5, r7, lr}
 800028a:	b090      	sub	sp, #64	; 0x40
 800028c:	af02      	add	r7, sp, #8
    // Habilitar el reloj para GPIOC y GPIOB
    RCC->IOPENR |= (1 << 2) | (1 << 1) | (1 << 0);
 800028e:	4b5e      	ldr	r3, [pc, #376]	; (8000408 <main+0x180>)
 8000290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000292:	4b5d      	ldr	r3, [pc, #372]	; (8000408 <main+0x180>)
 8000294:	2107      	movs	r1, #7
 8000296:	430a      	orrs	r2, r1
 8000298:	62da      	str	r2, [r3, #44]	; 0x2c

    // Definir máscaras para los modos de los pines del puerto C como salida
    uint32_t portC_masks = (0b01 << 8) |(0b01 << 10) | (0b01 << 12) | (0b01 << 14) | (0b01 << 16) | (0b01 << 18);
 800029a:	4b5c      	ldr	r3, [pc, #368]	; (800040c <main+0x184>)
 800029c:	633b      	str	r3, [r7, #48]	; 0x30

    // Limpiar y configurar los modos de los pines del puerto C como salida
    GPIOC->MODER &= ~(0b11 << 8 | 0b11 << 10 | 0b11 << 12 | 0b11 << 14 | 0b11 << 16 | 0b11 << 18);
 800029e:	4b5c      	ldr	r3, [pc, #368]	; (8000410 <main+0x188>)
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	4b5b      	ldr	r3, [pc, #364]	; (8000410 <main+0x188>)
 80002a4:	495b      	ldr	r1, [pc, #364]	; (8000414 <main+0x18c>)
 80002a6:	400a      	ands	r2, r1
 80002a8:	601a      	str	r2, [r3, #0]
    GPIOC->MODER |= portC_masks;
 80002aa:	4b59      	ldr	r3, [pc, #356]	; (8000410 <main+0x188>)
 80002ac:	6819      	ldr	r1, [r3, #0]
 80002ae:	4b58      	ldr	r3, [pc, #352]	; (8000410 <main+0x188>)
 80002b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80002b2:	430a      	orrs	r2, r1
 80002b4:	601a      	str	r2, [r3, #0]

    // Definir máscaras para los modos de los pines del puerto B como salida
    uint32_t portB_masks = (0b01 << 0) | (0b01 << 2) | (0b01 << 4) | (0b01 << 6) |
 80002b6:	4b58      	ldr	r3, [pc, #352]	; (8000418 <main+0x190>)
 80002b8:	62fb      	str	r3, [r7, #44]	; 0x2c
                           (0b01 << 8) | (0b01 << 10) | (0b01 << 12) | (0b01 << 14);



    // Limpiar y configurar los modos de los pines del puerto B como salida
    GPIOB->MODER &= ~(0xFFFF); // Limpiar todos los bits
 80002ba:	4b58      	ldr	r3, [pc, #352]	; (800041c <main+0x194>)
 80002bc:	681a      	ldr	r2, [r3, #0]
 80002be:	4b57      	ldr	r3, [pc, #348]	; (800041c <main+0x194>)
 80002c0:	0c12      	lsrs	r2, r2, #16
 80002c2:	0412      	lsls	r2, r2, #16
 80002c4:	601a      	str	r2, [r3, #0]
    GPIOB->MODER |= portB_masks;
 80002c6:	4b55      	ldr	r3, [pc, #340]	; (800041c <main+0x194>)
 80002c8:	6819      	ldr	r1, [r3, #0]
 80002ca:	4b54      	ldr	r3, [pc, #336]	; (800041c <main+0x194>)
 80002cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80002ce:	430a      	orrs	r2, r1
 80002d0:	601a      	str	r2, [r3, #0]


//********************************BOTÓN 1****************************************************************
    // Definir máscaras para los modos de los pines del puerto C como entrada
    uint32_t portC_masks_input = (0b00 << 26); // PC0 como entrada
 80002d2:	2300      	movs	r3, #0
 80002d4:	62bb      	str	r3, [r7, #40]	; 0x28
    //********************************BOTÓN 1****************************************************************
    // Limpiar y configurar los modos de los pines del puerto C como entrada
    GPIOC->MODER &= ~(0b11 << 26); // Limpiar los bits correspondientes
 80002d6:	4b4e      	ldr	r3, [pc, #312]	; (8000410 <main+0x188>)
 80002d8:	681a      	ldr	r2, [r3, #0]
 80002da:	4b4d      	ldr	r3, [pc, #308]	; (8000410 <main+0x188>)
 80002dc:	4950      	ldr	r1, [pc, #320]	; (8000420 <main+0x198>)
 80002de:	400a      	ands	r2, r1
 80002e0:	601a      	str	r2, [r3, #0]
    GPIOC->MODER |= portC_masks_input;
 80002e2:	4b4b      	ldr	r3, [pc, #300]	; (8000410 <main+0x188>)
 80002e4:	6819      	ldr	r1, [r3, #0]
 80002e6:	4b4a      	ldr	r3, [pc, #296]	; (8000410 <main+0x188>)
 80002e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80002ea:	430a      	orrs	r2, r1
 80002ec:	601a      	str	r2, [r3, #0]


    //********************************BOTÓN 2*******************************************************************
    // Definir máscaras para los modos de los pines del puerto A como entrada
    uint32_t portA_masks_input = (0b00 << 20) | (0b00 << 0); // PA10 como entrada
 80002ee:	2300      	movs	r3, #0
 80002f0:	627b      	str	r3, [r7, #36]	; 0x24

    // Limpiar y configurar los modos de los pines del puerto A como entrada para PA10 y PA2
    GPIOA->MODER &= ~(0b11 << 20); // Limpiar los bits correspondientes para PA10
 80002f2:	23a0      	movs	r3, #160	; 0xa0
 80002f4:	05db      	lsls	r3, r3, #23
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	23a0      	movs	r3, #160	; 0xa0
 80002fa:	05db      	lsls	r3, r3, #23
 80002fc:	4949      	ldr	r1, [pc, #292]	; (8000424 <main+0x19c>)
 80002fe:	400a      	ands	r2, r1
 8000300:	601a      	str	r2, [r3, #0]
    GPIOA->MODER &= ~(0b11 << 0);  // Limpiar los bits correspondientes para PA0
 8000302:	23a0      	movs	r3, #160	; 0xa0
 8000304:	05db      	lsls	r3, r3, #23
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	23a0      	movs	r3, #160	; 0xa0
 800030a:	05db      	lsls	r3, r3, #23
 800030c:	2103      	movs	r1, #3
 800030e:	438a      	bics	r2, r1
 8000310:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |= portA_masks_input; // Aplicar la máscara para configurar PA10 y PA0 como entradas
 8000312:	23a0      	movs	r3, #160	; 0xa0
 8000314:	05db      	lsls	r3, r3, #23
 8000316:	6819      	ldr	r1, [r3, #0]
 8000318:	23a0      	movs	r3, #160	; 0xa0
 800031a:	05db      	lsls	r3, r3, #23
 800031c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800031e:	430a      	orrs	r2, r1
 8000320:	601a      	str	r2, [r3, #0]



//******************************LED ALARMA******************************************************************
    // Definir máscaras para los modos de los pines del puerto A como salida
    uint32_t portA_masks_output = (0b01 << 10); // PA5 como salida
 8000322:	2380      	movs	r3, #128	; 0x80
 8000324:	00db      	lsls	r3, r3, #3
 8000326:	623b      	str	r3, [r7, #32]

    // Limpiar y configurar los modos de los pines del puerto A como salida
    GPIOA->MODER &= ~(0b11 << 10); // Limpiar los bits correspondientes
 8000328:	23a0      	movs	r3, #160	; 0xa0
 800032a:	05db      	lsls	r3, r3, #23
 800032c:	681a      	ldr	r2, [r3, #0]
 800032e:	23a0      	movs	r3, #160	; 0xa0
 8000330:	05db      	lsls	r3, r3, #23
 8000332:	493d      	ldr	r1, [pc, #244]	; (8000428 <main+0x1a0>)
 8000334:	400a      	ands	r2, r1
 8000336:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |= portA_masks_output;
 8000338:	23a0      	movs	r3, #160	; 0xa0
 800033a:	05db      	lsls	r3, r3, #23
 800033c:	6819      	ldr	r1, [r3, #0]
 800033e:	23a0      	movs	r3, #160	; 0xa0
 8000340:	05db      	lsls	r3, r3, #23
 8000342:	6a3a      	ldr	r2, [r7, #32]
 8000344:	430a      	orrs	r2, r1
 8000346:	601a      	str	r2, [r3, #0]

    struct Time_t alarma0 = {0, 8, 0, 0, 0, 0}; // Alarma configurada para las 08:00:00 AM
 8000348:	2114      	movs	r1, #20
 800034a:	187b      	adds	r3, r7, r1
 800034c:	2200      	movs	r2, #0
 800034e:	701a      	strb	r2, [r3, #0]
 8000350:	187b      	adds	r3, r7, r1
 8000352:	2208      	movs	r2, #8
 8000354:	705a      	strb	r2, [r3, #1]
 8000356:	187b      	adds	r3, r7, r1
 8000358:	2200      	movs	r2, #0
 800035a:	709a      	strb	r2, [r3, #2]
 800035c:	187b      	adds	r3, r7, r1
 800035e:	2200      	movs	r2, #0
 8000360:	70da      	strb	r2, [r3, #3]
 8000362:	187b      	adds	r3, r7, r1
 8000364:	2200      	movs	r2, #0
 8000366:	711a      	strb	r2, [r3, #4]
 8000368:	187b      	adds	r3, r7, r1
 800036a:	2200      	movs	r2, #0
 800036c:	715a      	strb	r2, [r3, #5]
    struct Time_t alarma2 = {0, 8, 0, 0, 0, 2}; // Alarma configurada para las 08:00:00 AM
 800036e:	230c      	movs	r3, #12
 8000370:	18fb      	adds	r3, r7, r3
 8000372:	4a2e      	ldr	r2, [pc, #184]	; (800042c <main+0x1a4>)
 8000374:	6811      	ldr	r1, [r2, #0]
 8000376:	6019      	str	r1, [r3, #0]
 8000378:	8892      	ldrh	r2, [r2, #4]
 800037a:	809a      	strh	r2, [r3, #4]
    struct Time_t alarma4 = {0, 8, 0, 0, 0, 4}; // Alarma configurada para las 08:00:00 AM
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	4a2c      	ldr	r2, [pc, #176]	; (8000430 <main+0x1a8>)
 8000380:	6811      	ldr	r1, [r2, #0]
 8000382:	6019      	str	r1, [r3, #0]
 8000384:	8892      	ldrh	r2, [r2, #4]
 8000386:	809a      	strh	r2, [r3, #4]

    set_time(0, 8, 5, 9, 5, 3); // 1:05:45 PM
 8000388:	2303      	movs	r3, #3
 800038a:	9301      	str	r3, [sp, #4]
 800038c:	2305      	movs	r3, #5
 800038e:	9300      	str	r3, [sp, #0]
 8000390:	2309      	movs	r3, #9
 8000392:	2205      	movs	r2, #5
 8000394:	2108      	movs	r1, #8
 8000396:	2000      	movs	r0, #0
 8000398:	f7ff ff42 	bl	8000220 <set_time>




    	// Verificar si el botón está presionado para cambiar el formato de la hora
        if ((GPIOA->IDR & (1 << 10)) == 0) // Suponiendo que el botón está conectado al pin PA10
 800039c:	23a0      	movs	r3, #160	; 0xa0
 800039e:	05db      	lsls	r3, r3, #23
 80003a0:	691a      	ldr	r2, [r3, #16]
 80003a2:	2380      	movs	r3, #128	; 0x80
 80003a4:	00db      	lsls	r3, r3, #3
 80003a6:	4013      	ands	r3, r2
 80003a8:	d000      	beq.n	80003ac <main+0x124>
 80003aa:	e07c      	b.n	80004a6 <main+0x21e>
        {
            // Guardar el tiempo actual antes de convertir al formato de 12 horas
            uint8_t temp_hour = watch.hour_decimal * 10 + watch.hour_unit;
 80003ac:	4b21      	ldr	r3, [pc, #132]	; (8000434 <main+0x1ac>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	1c1a      	adds	r2, r3, #0
 80003b2:	0092      	lsls	r2, r2, #2
 80003b4:	18d3      	adds	r3, r2, r3
 80003b6:	18db      	adds	r3, r3, r3
 80003b8:	b2d9      	uxtb	r1, r3
 80003ba:	4b1e      	ldr	r3, [pc, #120]	; (8000434 <main+0x1ac>)
 80003bc:	785a      	ldrb	r2, [r3, #1]
 80003be:	2037      	movs	r0, #55	; 0x37
 80003c0:	183b      	adds	r3, r7, r0
 80003c2:	188a      	adds	r2, r1, r2
 80003c4:	701a      	strb	r2, [r3, #0]
            if (formato_24_horas == 1)
 80003c6:	4b1c      	ldr	r3, [pc, #112]	; (8000438 <main+0x1b0>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	2b01      	cmp	r3, #1
 80003cc:	d112      	bne.n	80003f4 <main+0x16c>
            {
                if (temp_hour >= 13)
 80003ce:	183b      	adds	r3, r7, r0
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	2b0c      	cmp	r3, #12
 80003d4:	d905      	bls.n	80003e2 <main+0x15a>
                {
                    temp_hour -= 12; // Convertir a formato de 12 horas
 80003d6:	183b      	adds	r3, r7, r0
 80003d8:	183a      	adds	r2, r7, r0
 80003da:	7812      	ldrb	r2, [r2, #0]
 80003dc:	3a0c      	subs	r2, #12
 80003de:	701a      	strb	r2, [r3, #0]
 80003e0:	e036      	b.n	8000450 <main+0x1c8>
                }
                else if (temp_hour == 0)
 80003e2:	2237      	movs	r2, #55	; 0x37
 80003e4:	18bb      	adds	r3, r7, r2
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d131      	bne.n	8000450 <main+0x1c8>
                {
                    temp_hour = 12; // 12 AM en lugar de 0 AM
 80003ec:	18bb      	adds	r3, r7, r2
 80003ee:	220c      	movs	r2, #12
 80003f0:	701a      	strb	r2, [r3, #0]
 80003f2:	e02d      	b.n	8000450 <main+0x1c8>
                }
            }
            else
            {
                if (temp_hour == 12)
 80003f4:	2237      	movs	r2, #55	; 0x37
 80003f6:	18bb      	adds	r3, r7, r2
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	2b0c      	cmp	r3, #12
 80003fc:	d11e      	bne.n	800043c <main+0x1b4>
                {
                    temp_hour = 0; // 12 PM en lugar de 12 AM
 80003fe:	18bb      	adds	r3, r7, r2
 8000400:	2200      	movs	r2, #0
 8000402:	701a      	strb	r2, [r3, #0]
 8000404:	e024      	b.n	8000450 <main+0x1c8>
 8000406:	46c0      	nop			; (mov r8, r8)
 8000408:	40021000 	.word	0x40021000
 800040c:	00055500 	.word	0x00055500
 8000410:	50000800 	.word	0x50000800
 8000414:	fff000ff 	.word	0xfff000ff
 8000418:	00005555 	.word	0x00005555
 800041c:	50000400 	.word	0x50000400
 8000420:	f3ffffff 	.word	0xf3ffffff
 8000424:	ffcfffff 	.word	0xffcfffff
 8000428:	fffff3ff 	.word	0xfffff3ff
 800042c:	08000ae8 	.word	0x08000ae8
 8000430:	08000af0 	.word	0x08000af0
 8000434:	20000024 	.word	0x20000024
 8000438:	20000000 	.word	0x20000000
                }
                else if (temp_hour < 12)
 800043c:	2237      	movs	r2, #55	; 0x37
 800043e:	18bb      	adds	r3, r7, r2
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	2b0b      	cmp	r3, #11
 8000444:	d804      	bhi.n	8000450 <main+0x1c8>
                {
                    temp_hour += 12; // Convertir a formato de 24 horas
 8000446:	18bb      	adds	r3, r7, r2
 8000448:	18ba      	adds	r2, r7, r2
 800044a:	7812      	ldrb	r2, [r2, #0]
 800044c:	320c      	adds	r2, #12
 800044e:	701a      	strb	r2, [r3, #0]
                }
            }

            // Mostrar el tiempo en formato de 12 horas
            set_time(temp_hour / 10, temp_hour % 10, watch.minute_decimal, watch.minute_unit, watch.second_decimal, watch.second_unit);
 8000450:	2537      	movs	r5, #55	; 0x37
 8000452:	197b      	adds	r3, r7, r5
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	210a      	movs	r1, #10
 8000458:	0018      	movs	r0, r3
 800045a:	f7ff fe55 	bl	8000108 <__udivsi3>
 800045e:	0003      	movs	r3, r0
 8000460:	b2dc      	uxtb	r4, r3
 8000462:	197b      	adds	r3, r7, r5
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	210a      	movs	r1, #10
 8000468:	0018      	movs	r0, r3
 800046a:	f7ff fed3 	bl	8000214 <__aeabi_uidivmod>
 800046e:	000b      	movs	r3, r1
 8000470:	b2d9      	uxtb	r1, r3
 8000472:	4b9c      	ldr	r3, [pc, #624]	; (80006e4 <main+0x45c>)
 8000474:	7898      	ldrb	r0, [r3, #2]
 8000476:	4b9b      	ldr	r3, [pc, #620]	; (80006e4 <main+0x45c>)
 8000478:	78dd      	ldrb	r5, [r3, #3]
 800047a:	4b9a      	ldr	r3, [pc, #616]	; (80006e4 <main+0x45c>)
 800047c:	791b      	ldrb	r3, [r3, #4]
 800047e:	4a99      	ldr	r2, [pc, #612]	; (80006e4 <main+0x45c>)
 8000480:	7952      	ldrb	r2, [r2, #5]
 8000482:	9201      	str	r2, [sp, #4]
 8000484:	9300      	str	r3, [sp, #0]
 8000486:	002b      	movs	r3, r5
 8000488:	0002      	movs	r2, r0
 800048a:	0020      	movs	r0, r4
 800048c:	f7ff fec8 	bl	8000220 <set_time>

            // Cambiar el formato de hora para la próxima vez que se presione el botón
            formato_24_horas = !formato_24_horas;
 8000490:	4b95      	ldr	r3, [pc, #596]	; (80006e8 <main+0x460>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	425a      	negs	r2, r3
 8000496:	4153      	adcs	r3, r2
 8000498:	b2db      	uxtb	r3, r3
 800049a:	001a      	movs	r2, r3
 800049c:	4b92      	ldr	r3, [pc, #584]	; (80006e8 <main+0x460>)
 800049e:	701a      	strb	r2, [r3, #0]

            // Retraso para evitar falsos contactos (debouncing)
            delay_ms(100); // Ajusta este valor según sea necesario
 80004a0:	2064      	movs	r0, #100	; 0x64
 80004a2:	f000 fa8b 	bl	80009bc <delay_ms>

//************************************INCREMENTO DE MINUTOS*************************************************************************


        // Verificar si el botón está presionado para incrementar los minutos
        if ((GPIOA->IDR & (1 << 0)) == 0) // Suponiendo que el botón está conectado al pin PC13
 80004a6:	23a0      	movs	r3, #160	; 0xa0
 80004a8:	05db      	lsls	r3, r3, #23
 80004aa:	691b      	ldr	r3, [r3, #16]
 80004ac:	2201      	movs	r2, #1
 80004ae:	4013      	ands	r3, r2
 80004b0:	d11c      	bne.n	80004ec <main+0x264>
        {
            // Incrementar los minutos
            watch.minute_unit++;
 80004b2:	4b8c      	ldr	r3, [pc, #560]	; (80006e4 <main+0x45c>)
 80004b4:	78db      	ldrb	r3, [r3, #3]
 80004b6:	3301      	adds	r3, #1
 80004b8:	b2da      	uxtb	r2, r3
 80004ba:	4b8a      	ldr	r3, [pc, #552]	; (80006e4 <main+0x45c>)
 80004bc:	70da      	strb	r2, [r3, #3]

            // Verificar si se necesita llevar a cabo un carry en los minutos
            if (watch.minute_unit == 10)
 80004be:	4b89      	ldr	r3, [pc, #548]	; (80006e4 <main+0x45c>)
 80004c0:	78db      	ldrb	r3, [r3, #3]
 80004c2:	2b0a      	cmp	r3, #10
 80004c4:	d10f      	bne.n	80004e6 <main+0x25e>
            {
                watch.minute_unit = 0; // Reiniciar las unidades de minuto a cero
 80004c6:	4b87      	ldr	r3, [pc, #540]	; (80006e4 <main+0x45c>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	70da      	strb	r2, [r3, #3]
                watch.minute_decimal++; // Incrementar las decenas de minuto
 80004cc:	4b85      	ldr	r3, [pc, #532]	; (80006e4 <main+0x45c>)
 80004ce:	789b      	ldrb	r3, [r3, #2]
 80004d0:	3301      	adds	r3, #1
 80004d2:	b2da      	uxtb	r2, r3
 80004d4:	4b83      	ldr	r3, [pc, #524]	; (80006e4 <main+0x45c>)
 80004d6:	709a      	strb	r2, [r3, #2]

                // Verificar si se necesita llevar a cabo un carry en las decenas de minuto
                if (watch.minute_decimal == 6)
 80004d8:	4b82      	ldr	r3, [pc, #520]	; (80006e4 <main+0x45c>)
 80004da:	789b      	ldrb	r3, [r3, #2]
 80004dc:	2b06      	cmp	r3, #6
 80004de:	d102      	bne.n	80004e6 <main+0x25e>
                {
                    watch.minute_decimal = 0; // Reiniciar las decenas de minuto a cero
 80004e0:	4b80      	ldr	r3, [pc, #512]	; (80006e4 <main+0x45c>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	709a      	strb	r2, [r3, #2]
                }
            }

            // Retraso para evitar falsos contactos (debouncing)
            delay_ms(100); // Ajusta este valor según sea necesario
 80004e6:	2064      	movs	r0, #100	; 0x64
 80004e8:	f000 fa68 	bl	80009bc <delay_ms>


 //***********************************CAMBO DE HORA ALARMA**************************************************************************

        // Verificar si el botón está presionado para incrementar la hora de las alarmas
        if ((GPIOC->IDR & (1 << 13)) == 0) // Suponiendo que el botón está conectado al pin PC13
 80004ec:	4b7f      	ldr	r3, [pc, #508]	; (80006ec <main+0x464>)
 80004ee:	691a      	ldr	r2, [r3, #16]
 80004f0:	2380      	movs	r3, #128	; 0x80
 80004f2:	019b      	lsls	r3, r3, #6
 80004f4:	4013      	ands	r3, r2
 80004f6:	d155      	bne.n	80005a4 <main+0x31c>
        {
            // Incrementar las horas de las tres alarmas
            alarma0.hour_unit++;
 80004f8:	2114      	movs	r1, #20
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	785b      	ldrb	r3, [r3, #1]
 80004fe:	3301      	adds	r3, #1
 8000500:	b2da      	uxtb	r2, r3
 8000502:	187b      	adds	r3, r7, r1
 8000504:	705a      	strb	r2, [r3, #1]
            alarma2.hour_unit++;
 8000506:	200c      	movs	r0, #12
 8000508:	183b      	adds	r3, r7, r0
 800050a:	785b      	ldrb	r3, [r3, #1]
 800050c:	3301      	adds	r3, #1
 800050e:	b2da      	uxtb	r2, r3
 8000510:	183b      	adds	r3, r7, r0
 8000512:	705a      	strb	r2, [r3, #1]
            alarma4.hour_unit++;
 8000514:	1d3b      	adds	r3, r7, #4
 8000516:	785b      	ldrb	r3, [r3, #1]
 8000518:	3301      	adds	r3, #1
 800051a:	b2da      	uxtb	r2, r3
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	705a      	strb	r2, [r3, #1]

            // Verificar si se necesita llevar a cabo un carry en las horas de las alarmas
            if (alarma0.hour_unit == 10)
 8000520:	187b      	adds	r3, r7, r1
 8000522:	785b      	ldrb	r3, [r3, #1]
 8000524:	2b0a      	cmp	r3, #10
 8000526:	d108      	bne.n	800053a <main+0x2b2>
            {
                alarma0.hour_unit = 0; // Reiniciar las unidades de hora a cero
 8000528:	187b      	adds	r3, r7, r1
 800052a:	2200      	movs	r2, #0
 800052c:	705a      	strb	r2, [r3, #1]
                alarma0.hour_decimal++; // Incrementar las decenas de hora
 800052e:	187b      	adds	r3, r7, r1
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	3301      	adds	r3, #1
 8000534:	b2da      	uxtb	r2, r3
 8000536:	187b      	adds	r3, r7, r1
 8000538:	701a      	strb	r2, [r3, #0]
            }
            if (alarma2.hour_unit == 10)
 800053a:	210c      	movs	r1, #12
 800053c:	187b      	adds	r3, r7, r1
 800053e:	785b      	ldrb	r3, [r3, #1]
 8000540:	2b0a      	cmp	r3, #10
 8000542:	d108      	bne.n	8000556 <main+0x2ce>
            {
                alarma2.hour_unit = 0; // Reiniciar las unidades de hora a cero
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2200      	movs	r2, #0
 8000548:	705a      	strb	r2, [r3, #1]
                alarma2.hour_decimal++; // Incrementar las decenas de hora
 800054a:	187b      	adds	r3, r7, r1
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	3301      	adds	r3, #1
 8000550:	b2da      	uxtb	r2, r3
 8000552:	187b      	adds	r3, r7, r1
 8000554:	701a      	strb	r2, [r3, #0]
            }
            if (alarma4.hour_unit == 10)
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	785b      	ldrb	r3, [r3, #1]
 800055a:	2b0a      	cmp	r3, #10
 800055c:	d108      	bne.n	8000570 <main+0x2e8>
            {
                alarma4.hour_unit = 0; // Reiniciar las unidades de hora a cero
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	2200      	movs	r2, #0
 8000562:	705a      	strb	r2, [r3, #1]
                alarma4.hour_decimal++; // Incrementar las decenas de hora
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	3301      	adds	r3, #1
 800056a:	b2da      	uxtb	r2, r3
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	701a      	strb	r2, [r3, #0]
            }

            // Verificar si se necesita llevar a cabo un carry en las decenas de hora
            if (alarma0.hour_decimal == 2)
 8000570:	2214      	movs	r2, #20
 8000572:	18bb      	adds	r3, r7, r2
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b02      	cmp	r3, #2
 8000578:	d102      	bne.n	8000580 <main+0x2f8>
            {
                alarma0.hour_decimal = 0; // Reiniciar las decenas de hora a cero
 800057a:	18bb      	adds	r3, r7, r2
 800057c:	2200      	movs	r2, #0
 800057e:	701a      	strb	r2, [r3, #0]
            }
            if (alarma2.hour_decimal == 2)
 8000580:	220c      	movs	r2, #12
 8000582:	18bb      	adds	r3, r7, r2
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b02      	cmp	r3, #2
 8000588:	d102      	bne.n	8000590 <main+0x308>
            {
                alarma2.hour_decimal = 0; // Reiniciar las decenas de hora a cero
 800058a:	18bb      	adds	r3, r7, r2
 800058c:	2200      	movs	r2, #0
 800058e:	701a      	strb	r2, [r3, #0]
            }
            if (alarma4.hour_decimal == 2)
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2b02      	cmp	r3, #2
 8000596:	d102      	bne.n	800059e <main+0x316>
            {
                alarma4.hour_decimal = 0; // Reiniciar las decenas de hora a cero
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	2200      	movs	r2, #0
 800059c:	701a      	strb	r2, [r3, #0]
            }

            // Retraso para evitar falsos contactos (debouncing)
            delay_ms(100); // Ajusta este valor según sea necesario
 800059e:	2064      	movs	r0, #100	; 0x64
 80005a0:	f000 fa0c 	bl	80009bc <delay_ms>
        }


        // Llamar a la función para mostrar la hora en el display
        formato_hora();
 80005a4:	f000 f8a4 	bl	80006f0 <formato_hora>


//***************************************ALARMA**********************************************************************
        uint8_t alarm_second0 = alarma0.second_unit;
 80005a8:	201f      	movs	r0, #31
 80005aa:	183b      	adds	r3, r7, r0
 80005ac:	2114      	movs	r1, #20
 80005ae:	187a      	adds	r2, r7, r1
 80005b0:	7952      	ldrb	r2, [r2, #5]
 80005b2:	701a      	strb	r2, [r3, #0]
        uint8_t alarm_second2 = alarma2.second_unit;
 80005b4:	231e      	movs	r3, #30
 80005b6:	18fb      	adds	r3, r7, r3
 80005b8:	220c      	movs	r2, #12
 80005ba:	18ba      	adds	r2, r7, r2
 80005bc:	7952      	ldrb	r2, [r2, #5]
 80005be:	701a      	strb	r2, [r3, #0]
        uint8_t alarm_second4 = alarma4.second_unit;
 80005c0:	231d      	movs	r3, #29
 80005c2:	18fb      	adds	r3, r7, r3
 80005c4:	1d3a      	adds	r2, r7, #4
 80005c6:	7952      	ldrb	r2, [r2, #5]
 80005c8:	701a      	strb	r2, [r3, #0]

        if ((watch.hour_decimal == alarma0.hour_decimal &&
 80005ca:	4b46      	ldr	r3, [pc, #280]	; (80006e4 <main+0x45c>)
 80005cc:	781a      	ldrb	r2, [r3, #0]
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	429a      	cmp	r2, r3
 80005d4:	d121      	bne.n	800061a <main+0x392>
             watch.hour_unit == alarma0.hour_unit &&
 80005d6:	4b43      	ldr	r3, [pc, #268]	; (80006e4 <main+0x45c>)
 80005d8:	785a      	ldrb	r2, [r3, #1]
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	785b      	ldrb	r3, [r3, #1]
        if ((watch.hour_decimal == alarma0.hour_decimal &&
 80005de:	429a      	cmp	r2, r3
 80005e0:	d11b      	bne.n	800061a <main+0x392>
             watch.minute_decimal == alarma0.minute_decimal &&
 80005e2:	4b40      	ldr	r3, [pc, #256]	; (80006e4 <main+0x45c>)
 80005e4:	789a      	ldrb	r2, [r3, #2]
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	789b      	ldrb	r3, [r3, #2]
             watch.hour_unit == alarma0.hour_unit &&
 80005ea:	429a      	cmp	r2, r3
 80005ec:	d115      	bne.n	800061a <main+0x392>
             watch.minute_unit == alarma0.minute_unit &&
 80005ee:	4b3d      	ldr	r3, [pc, #244]	; (80006e4 <main+0x45c>)
 80005f0:	78da      	ldrb	r2, [r3, #3]
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	78db      	ldrb	r3, [r3, #3]
             watch.minute_decimal == alarma0.minute_decimal &&
 80005f6:	429a      	cmp	r2, r3
 80005f8:	d10f      	bne.n	800061a <main+0x392>
             watch.second_decimal == alarma0.second_decimal &&
 80005fa:	4b3a      	ldr	r3, [pc, #232]	; (80006e4 <main+0x45c>)
 80005fc:	791a      	ldrb	r2, [r3, #4]
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	791b      	ldrb	r3, [r3, #4]
             watch.minute_unit == alarma0.minute_unit &&
 8000602:	429a      	cmp	r2, r3
 8000604:	d109      	bne.n	800061a <main+0x392>
             watch.second_unit == alarma0.second_unit && alarm_second0 == 0) ||
 8000606:	4b37      	ldr	r3, [pc, #220]	; (80006e4 <main+0x45c>)
 8000608:	795a      	ldrb	r2, [r3, #5]
 800060a:	187b      	adds	r3, r7, r1
 800060c:	795b      	ldrb	r3, [r3, #5]
             watch.second_decimal == alarma0.second_decimal &&
 800060e:	429a      	cmp	r2, r3
 8000610:	d103      	bne.n	800061a <main+0x392>
             watch.second_unit == alarma0.second_unit && alarm_second0 == 0) ||
 8000612:	183b      	adds	r3, r7, r0
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d052      	beq.n	80006c0 <main+0x438>
            (watch.hour_decimal == alarma2.hour_decimal &&
 800061a:	4b32      	ldr	r3, [pc, #200]	; (80006e4 <main+0x45c>)
 800061c:	781a      	ldrb	r2, [r3, #0]
 800061e:	210c      	movs	r1, #12
 8000620:	187b      	adds	r3, r7, r1
 8000622:	781b      	ldrb	r3, [r3, #0]
             watch.second_unit == alarma0.second_unit && alarm_second0 == 0) ||
 8000624:	429a      	cmp	r2, r3
 8000626:	d122      	bne.n	800066e <main+0x3e6>
             watch.hour_unit == alarma2.hour_unit &&
 8000628:	4b2e      	ldr	r3, [pc, #184]	; (80006e4 <main+0x45c>)
 800062a:	785a      	ldrb	r2, [r3, #1]
 800062c:	187b      	adds	r3, r7, r1
 800062e:	785b      	ldrb	r3, [r3, #1]
            (watch.hour_decimal == alarma2.hour_decimal &&
 8000630:	429a      	cmp	r2, r3
 8000632:	d11c      	bne.n	800066e <main+0x3e6>
             watch.minute_decimal == alarma2.minute_decimal &&
 8000634:	4b2b      	ldr	r3, [pc, #172]	; (80006e4 <main+0x45c>)
 8000636:	789a      	ldrb	r2, [r3, #2]
 8000638:	187b      	adds	r3, r7, r1
 800063a:	789b      	ldrb	r3, [r3, #2]
             watch.hour_unit == alarma2.hour_unit &&
 800063c:	429a      	cmp	r2, r3
 800063e:	d116      	bne.n	800066e <main+0x3e6>
             watch.minute_unit == alarma2.minute_unit &&
 8000640:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <main+0x45c>)
 8000642:	78da      	ldrb	r2, [r3, #3]
 8000644:	187b      	adds	r3, r7, r1
 8000646:	78db      	ldrb	r3, [r3, #3]
             watch.minute_decimal == alarma2.minute_decimal &&
 8000648:	429a      	cmp	r2, r3
 800064a:	d110      	bne.n	800066e <main+0x3e6>
             watch.second_decimal == alarma2.second_decimal &&
 800064c:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <main+0x45c>)
 800064e:	791a      	ldrb	r2, [r3, #4]
 8000650:	187b      	adds	r3, r7, r1
 8000652:	791b      	ldrb	r3, [r3, #4]
             watch.minute_unit == alarma2.minute_unit &&
 8000654:	429a      	cmp	r2, r3
 8000656:	d10a      	bne.n	800066e <main+0x3e6>
             watch.second_unit == alarma2.second_unit && alarm_second2 == 2) ||
 8000658:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <main+0x45c>)
 800065a:	795a      	ldrb	r2, [r3, #5]
 800065c:	187b      	adds	r3, r7, r1
 800065e:	795b      	ldrb	r3, [r3, #5]
             watch.second_decimal == alarma2.second_decimal &&
 8000660:	429a      	cmp	r2, r3
 8000662:	d104      	bne.n	800066e <main+0x3e6>
             watch.second_unit == alarma2.second_unit && alarm_second2 == 2) ||
 8000664:	231e      	movs	r3, #30
 8000666:	18fb      	adds	r3, r7, r3
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b02      	cmp	r3, #2
 800066c:	d028      	beq.n	80006c0 <main+0x438>
            (watch.hour_decimal == alarma4.hour_decimal &&
 800066e:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <main+0x45c>)
 8000670:	781a      	ldrb	r2, [r3, #0]
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	781b      	ldrb	r3, [r3, #0]
             watch.second_unit == alarma2.second_unit && alarm_second2 == 2) ||
 8000676:	429a      	cmp	r2, r3
 8000678:	d12b      	bne.n	80006d2 <main+0x44a>
             watch.hour_unit == alarma4.hour_unit &&
 800067a:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <main+0x45c>)
 800067c:	785a      	ldrb	r2, [r3, #1]
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	785b      	ldrb	r3, [r3, #1]
            (watch.hour_decimal == alarma4.hour_decimal &&
 8000682:	429a      	cmp	r2, r3
 8000684:	d125      	bne.n	80006d2 <main+0x44a>
             watch.minute_decimal == alarma4.minute_decimal &&
 8000686:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <main+0x45c>)
 8000688:	789a      	ldrb	r2, [r3, #2]
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	789b      	ldrb	r3, [r3, #2]
             watch.hour_unit == alarma4.hour_unit &&
 800068e:	429a      	cmp	r2, r3
 8000690:	d11f      	bne.n	80006d2 <main+0x44a>
             watch.minute_unit == alarma4.minute_unit &&
 8000692:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <main+0x45c>)
 8000694:	78da      	ldrb	r2, [r3, #3]
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	78db      	ldrb	r3, [r3, #3]
             watch.minute_decimal == alarma4.minute_decimal &&
 800069a:	429a      	cmp	r2, r3
 800069c:	d119      	bne.n	80006d2 <main+0x44a>
             watch.second_decimal == alarma4.second_decimal &&
 800069e:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <main+0x45c>)
 80006a0:	791a      	ldrb	r2, [r3, #4]
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	791b      	ldrb	r3, [r3, #4]
             watch.minute_unit == alarma4.minute_unit &&
 80006a6:	429a      	cmp	r2, r3
 80006a8:	d113      	bne.n	80006d2 <main+0x44a>
             watch.second_unit == alarma4.second_unit && alarm_second4 == 4))
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <main+0x45c>)
 80006ac:	795a      	ldrb	r2, [r3, #5]
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	795b      	ldrb	r3, [r3, #5]
             watch.second_decimal == alarma4.second_decimal &&
 80006b2:	429a      	cmp	r2, r3
 80006b4:	d10d      	bne.n	80006d2 <main+0x44a>
             watch.second_unit == alarma4.second_unit && alarm_second4 == 4))
 80006b6:	231d      	movs	r3, #29
 80006b8:	18fb      	adds	r3, r7, r3
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b04      	cmp	r3, #4
 80006be:	d108      	bne.n	80006d2 <main+0x44a>
        {
            GPIOA->ODR |= (1 << 5); // Encender el LED
 80006c0:	23a0      	movs	r3, #160	; 0xa0
 80006c2:	05db      	lsls	r3, r3, #23
 80006c4:	695a      	ldr	r2, [r3, #20]
 80006c6:	23a0      	movs	r3, #160	; 0xa0
 80006c8:	05db      	lsls	r3, r3, #23
 80006ca:	2120      	movs	r1, #32
 80006cc:	430a      	orrs	r2, r1
 80006ce:	615a      	str	r2, [r3, #20]
 80006d0:	e007      	b.n	80006e2 <main+0x45a>
        }
        else
        {
            GPIOA->ODR &= ~(1 << 5); // Apagar el LED si ninguna alarma coincide
 80006d2:	23a0      	movs	r3, #160	; 0xa0
 80006d4:	05db      	lsls	r3, r3, #23
 80006d6:	695a      	ldr	r2, [r3, #20]
 80006d8:	23a0      	movs	r3, #160	; 0xa0
 80006da:	05db      	lsls	r3, r3, #23
 80006dc:	2120      	movs	r1, #32
 80006de:	438a      	bics	r2, r1
 80006e0:	615a      	str	r2, [r3, #20]
    {
 80006e2:	e65b      	b.n	800039c <main+0x114>
 80006e4:	20000024 	.word	0x20000024
 80006e8:	20000000 	.word	0x20000000
 80006ec:	50000800 	.word	0x50000800

080006f0 <formato_hora>:

    }
}

void formato_hora()
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
    // Limpiar los puertos antes de encender los segmentos correspondientes y los dígitos
    GPIOB->BSRR |= 0xFFFF0000; // Limpiar todos los bits del puerto B
 80006f4:	4ba9      	ldr	r3, [pc, #676]	; (800099c <formato_hora+0x2ac>)
 80006f6:	699a      	ldr	r2, [r3, #24]
 80006f8:	4ba8      	ldr	r3, [pc, #672]	; (800099c <formato_hora+0x2ac>)
 80006fa:	49a9      	ldr	r1, [pc, #676]	; (80009a0 <formato_hora+0x2b0>)
 80006fc:	430a      	orrs	r2, r1
 80006fe:	619a      	str	r2, [r3, #24]
    GPIOC->BSRR |= 0xFFFF0000; // Limpiar todos los bits del puerto C
 8000700:	4ba8      	ldr	r3, [pc, #672]	; (80009a4 <formato_hora+0x2b4>)
 8000702:	699a      	ldr	r2, [r3, #24]
 8000704:	4ba7      	ldr	r3, [pc, #668]	; (80009a4 <formato_hora+0x2b4>)
 8000706:	49a6      	ldr	r1, [pc, #664]	; (80009a0 <formato_hora+0x2b0>)
 8000708:	430a      	orrs	r2, r1
 800070a:	619a      	str	r2, [r3, #24]

    switch (myfsm)
 800070c:	4ba6      	ldr	r3, [pc, #664]	; (80009a8 <formato_hora+0x2b8>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b05      	cmp	r3, #5
 8000712:	d900      	bls.n	8000716 <formato_hora+0x26>
 8000714:	e09c      	b.n	8000850 <formato_hora+0x160>
 8000716:	009a      	lsls	r2, r3, #2
 8000718:	4ba4      	ldr	r3, [pc, #656]	; (80009ac <formato_hora+0x2bc>)
 800071a:	18d3      	adds	r3, r2, r3
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	469f      	mov	pc, r3
    {
    case 0:
        // Encender segmento correspondiente al dígito 7 en formato 24h
        GPIOC->BSRR |= 0X01 << 5;
 8000720:	4ba0      	ldr	r3, [pc, #640]	; (80009a4 <formato_hora+0x2b4>)
 8000722:	699a      	ldr	r2, [r3, #24]
 8000724:	4b9f      	ldr	r3, [pc, #636]	; (80009a4 <formato_hora+0x2b4>)
 8000726:	2120      	movs	r1, #32
 8000728:	430a      	orrs	r2, r1
 800072a:	619a      	str	r2, [r3, #24]
        // Encender el dígito 7 en formato 24h
        GPIOB->BSRR |= decoder(watch.second_unit);
 800072c:	4ba0      	ldr	r3, [pc, #640]	; (80009b0 <formato_hora+0x2c0>)
 800072e:	795b      	ldrb	r3, [r3, #5]
 8000730:	0018      	movs	r0, r3
 8000732:	f000 f969 	bl	8000a08 <decoder>
 8000736:	0003      	movs	r3, r0
 8000738:	0019      	movs	r1, r3
 800073a:	4b98      	ldr	r3, [pc, #608]	; (800099c <formato_hora+0x2ac>)
 800073c:	699a      	ldr	r2, [r3, #24]
 800073e:	4b97      	ldr	r3, [pc, #604]	; (800099c <formato_hora+0x2ac>)
 8000740:	430a      	orrs	r2, r1
 8000742:	619a      	str	r2, [r3, #24]
        myfsm = 1; // Cambiar al siguiente estado
 8000744:	4b98      	ldr	r3, [pc, #608]	; (80009a8 <formato_hora+0x2b8>)
 8000746:	2201      	movs	r2, #1
 8000748:	701a      	strb	r2, [r3, #0]
        break;
 800074a:	e085      	b.n	8000858 <formato_hora+0x168>

    case 1:
        // Encender segmento correspondiente al dígito 3 en formato 24h
        GPIOC->BSRR |= 0X01 << 6;
 800074c:	4b95      	ldr	r3, [pc, #596]	; (80009a4 <formato_hora+0x2b4>)
 800074e:	699a      	ldr	r2, [r3, #24]
 8000750:	4b94      	ldr	r3, [pc, #592]	; (80009a4 <formato_hora+0x2b4>)
 8000752:	2140      	movs	r1, #64	; 0x40
 8000754:	430a      	orrs	r2, r1
 8000756:	619a      	str	r2, [r3, #24]
        // Encender el dígito 3 en formato 24h
        GPIOB->BSRR |= decoder(watch.second_decimal);
 8000758:	4b95      	ldr	r3, [pc, #596]	; (80009b0 <formato_hora+0x2c0>)
 800075a:	791b      	ldrb	r3, [r3, #4]
 800075c:	0018      	movs	r0, r3
 800075e:	f000 f953 	bl	8000a08 <decoder>
 8000762:	0003      	movs	r3, r0
 8000764:	0019      	movs	r1, r3
 8000766:	4b8d      	ldr	r3, [pc, #564]	; (800099c <formato_hora+0x2ac>)
 8000768:	699a      	ldr	r2, [r3, #24]
 800076a:	4b8c      	ldr	r3, [pc, #560]	; (800099c <formato_hora+0x2ac>)
 800076c:	430a      	orrs	r2, r1
 800076e:	619a      	str	r2, [r3, #24]
        myfsm++; // Avanzar al siguiente estado
 8000770:	4b8d      	ldr	r3, [pc, #564]	; (80009a8 <formato_hora+0x2b8>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	3301      	adds	r3, #1
 8000776:	b2da      	uxtb	r2, r3
 8000778:	4b8b      	ldr	r3, [pc, #556]	; (80009a8 <formato_hora+0x2b8>)
 800077a:	701a      	strb	r2, [r3, #0]
        break;
 800077c:	e06c      	b.n	8000858 <formato_hora+0x168>

    case 2:
        // Encender segmento correspondiente al dígito X en formato 24h
        GPIOC->BSRR |= 0X01 << 8;
 800077e:	4b89      	ldr	r3, [pc, #548]	; (80009a4 <formato_hora+0x2b4>)
 8000780:	699a      	ldr	r2, [r3, #24]
 8000782:	4b88      	ldr	r3, [pc, #544]	; (80009a4 <formato_hora+0x2b4>)
 8000784:	2180      	movs	r1, #128	; 0x80
 8000786:	0049      	lsls	r1, r1, #1
 8000788:	430a      	orrs	r2, r1
 800078a:	619a      	str	r2, [r3, #24]
        // Encender el dígito X en formato 24h
        GPIOB->BSRR |= decoder(watch.minute_unit);
 800078c:	4b88      	ldr	r3, [pc, #544]	; (80009b0 <formato_hora+0x2c0>)
 800078e:	78db      	ldrb	r3, [r3, #3]
 8000790:	0018      	movs	r0, r3
 8000792:	f000 f939 	bl	8000a08 <decoder>
 8000796:	0003      	movs	r3, r0
 8000798:	0019      	movs	r1, r3
 800079a:	4b80      	ldr	r3, [pc, #512]	; (800099c <formato_hora+0x2ac>)
 800079c:	699a      	ldr	r2, [r3, #24]
 800079e:	4b7f      	ldr	r3, [pc, #508]	; (800099c <formato_hora+0x2ac>)
 80007a0:	430a      	orrs	r2, r1
 80007a2:	619a      	str	r2, [r3, #24]
        myfsm++; // Avanzar al siguiente estado
 80007a4:	4b80      	ldr	r3, [pc, #512]	; (80009a8 <formato_hora+0x2b8>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	3301      	adds	r3, #1
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	4b7e      	ldr	r3, [pc, #504]	; (80009a8 <formato_hora+0x2b8>)
 80007ae:	701a      	strb	r2, [r3, #0]
        break;
 80007b0:	e052      	b.n	8000858 <formato_hora+0x168>

    case 3:
        // Encender segmento correspondiente al dígito X en formato 24h
        GPIOC->BSRR |= 0X01 << 9;
 80007b2:	4b7c      	ldr	r3, [pc, #496]	; (80009a4 <formato_hora+0x2b4>)
 80007b4:	699a      	ldr	r2, [r3, #24]
 80007b6:	4b7b      	ldr	r3, [pc, #492]	; (80009a4 <formato_hora+0x2b4>)
 80007b8:	2180      	movs	r1, #128	; 0x80
 80007ba:	0089      	lsls	r1, r1, #2
 80007bc:	430a      	orrs	r2, r1
 80007be:	619a      	str	r2, [r3, #24]
        // Encender el dígito X en formato 24h
        GPIOB->BSRR |= decoder(watch.minute_decimal);
 80007c0:	4b7b      	ldr	r3, [pc, #492]	; (80009b0 <formato_hora+0x2c0>)
 80007c2:	789b      	ldrb	r3, [r3, #2]
 80007c4:	0018      	movs	r0, r3
 80007c6:	f000 f91f 	bl	8000a08 <decoder>
 80007ca:	0003      	movs	r3, r0
 80007cc:	0019      	movs	r1, r3
 80007ce:	4b73      	ldr	r3, [pc, #460]	; (800099c <formato_hora+0x2ac>)
 80007d0:	699a      	ldr	r2, [r3, #24]
 80007d2:	4b72      	ldr	r3, [pc, #456]	; (800099c <formato_hora+0x2ac>)
 80007d4:	430a      	orrs	r2, r1
 80007d6:	619a      	str	r2, [r3, #24]
        myfsm++; // Avanzar al siguiente estado
 80007d8:	4b73      	ldr	r3, [pc, #460]	; (80009a8 <formato_hora+0x2b8>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	3301      	adds	r3, #1
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	4b71      	ldr	r3, [pc, #452]	; (80009a8 <formato_hora+0x2b8>)
 80007e2:	701a      	strb	r2, [r3, #0]
        break;
 80007e4:	e038      	b.n	8000858 <formato_hora+0x168>

    case 4:
        // Encender segmento correspondiente al dígito X en formato 24h
        GPIOC->BSRR |= 0X01 << 7;
 80007e6:	4b6f      	ldr	r3, [pc, #444]	; (80009a4 <formato_hora+0x2b4>)
 80007e8:	699a      	ldr	r2, [r3, #24]
 80007ea:	4b6e      	ldr	r3, [pc, #440]	; (80009a4 <formato_hora+0x2b4>)
 80007ec:	2180      	movs	r1, #128	; 0x80
 80007ee:	430a      	orrs	r2, r1
 80007f0:	619a      	str	r2, [r3, #24]
        // Encender el dígito X en formato 24h
        GPIOB->BSRR |= decoder(watch.hour_unit % 10);
 80007f2:	4b6f      	ldr	r3, [pc, #444]	; (80009b0 <formato_hora+0x2c0>)
 80007f4:	785b      	ldrb	r3, [r3, #1]
 80007f6:	210a      	movs	r1, #10
 80007f8:	0018      	movs	r0, r3
 80007fa:	f7ff fd0b 	bl	8000214 <__aeabi_uidivmod>
 80007fe:	000b      	movs	r3, r1
 8000800:	b2db      	uxtb	r3, r3
 8000802:	0018      	movs	r0, r3
 8000804:	f000 f900 	bl	8000a08 <decoder>
 8000808:	0003      	movs	r3, r0
 800080a:	0019      	movs	r1, r3
 800080c:	4b63      	ldr	r3, [pc, #396]	; (800099c <formato_hora+0x2ac>)
 800080e:	699a      	ldr	r2, [r3, #24]
 8000810:	4b62      	ldr	r3, [pc, #392]	; (800099c <formato_hora+0x2ac>)
 8000812:	430a      	orrs	r2, r1
 8000814:	619a      	str	r2, [r3, #24]
        myfsm++; // Avanzar al siguiente estado
 8000816:	4b64      	ldr	r3, [pc, #400]	; (80009a8 <formato_hora+0x2b8>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	3301      	adds	r3, #1
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4b62      	ldr	r3, [pc, #392]	; (80009a8 <formato_hora+0x2b8>)
 8000820:	701a      	strb	r2, [r3, #0]
        break;
 8000822:	e019      	b.n	8000858 <formato_hora+0x168>

    case 5:
        // Encender segmento correspondiente al dígito X en formato 24h
        GPIOC->BSRR |= 0X01 << 4;
 8000824:	4b5f      	ldr	r3, [pc, #380]	; (80009a4 <formato_hora+0x2b4>)
 8000826:	699a      	ldr	r2, [r3, #24]
 8000828:	4b5e      	ldr	r3, [pc, #376]	; (80009a4 <formato_hora+0x2b4>)
 800082a:	2110      	movs	r1, #16
 800082c:	430a      	orrs	r2, r1
 800082e:	619a      	str	r2, [r3, #24]
        // Encender el dígito X en formato 24h
        GPIOB->BSRR |= decoder(watch.hour_decimal);
 8000830:	4b5f      	ldr	r3, [pc, #380]	; (80009b0 <formato_hora+0x2c0>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	0018      	movs	r0, r3
 8000836:	f000 f8e7 	bl	8000a08 <decoder>
 800083a:	0003      	movs	r3, r0
 800083c:	0019      	movs	r1, r3
 800083e:	4b57      	ldr	r3, [pc, #348]	; (800099c <formato_hora+0x2ac>)
 8000840:	699a      	ldr	r2, [r3, #24]
 8000842:	4b56      	ldr	r3, [pc, #344]	; (800099c <formato_hora+0x2ac>)
 8000844:	430a      	orrs	r2, r1
 8000846:	619a      	str	r2, [r3, #24]
        myfsm = 0; // Volver al estado inicial
 8000848:	4b57      	ldr	r3, [pc, #348]	; (80009a8 <formato_hora+0x2b8>)
 800084a:	2200      	movs	r2, #0
 800084c:	701a      	strb	r2, [r3, #0]
        break;
 800084e:	e003      	b.n	8000858 <formato_hora+0x168>

    default:
        myfsm = 0; // En caso de cualquier otro estado, volver al estado inicial
 8000850:	4b55      	ldr	r3, [pc, #340]	; (80009a8 <formato_hora+0x2b8>)
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]
        break;
 8000856:	46c0      	nop			; (mov r8, r8)
    }

    delay_ms(1);
 8000858:	2001      	movs	r0, #1
 800085a:	f000 f8af 	bl	80009bc <delay_ms>
    inc_second++;
 800085e:	4b55      	ldr	r3, [pc, #340]	; (80009b4 <formato_hora+0x2c4>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	3301      	adds	r3, #1
 8000864:	b2da      	uxtb	r2, r3
 8000866:	4b53      	ldr	r3, [pc, #332]	; (80009b4 <formato_hora+0x2c4>)
 8000868:	701a      	strb	r2, [r3, #0]

    if (inc_second == 100) {
 800086a:	4b52      	ldr	r3, [pc, #328]	; (80009b4 <formato_hora+0x2c4>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2b64      	cmp	r3, #100	; 0x64
 8000870:	d000      	beq.n	8000874 <formato_hora+0x184>
 8000872:	e08f      	b.n	8000994 <formato_hora+0x2a4>
        inc_second = 0; // Reiniciar el contador de milisegundos
 8000874:	4b4f      	ldr	r3, [pc, #316]	; (80009b4 <formato_hora+0x2c4>)
 8000876:	2200      	movs	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]
        watch.second_unit++; // Incrementar las unidades de segundo
 800087a:	4b4d      	ldr	r3, [pc, #308]	; (80009b0 <formato_hora+0x2c0>)
 800087c:	795b      	ldrb	r3, [r3, #5]
 800087e:	3301      	adds	r3, #1
 8000880:	b2da      	uxtb	r2, r3
 8000882:	4b4b      	ldr	r3, [pc, #300]	; (80009b0 <formato_hora+0x2c0>)
 8000884:	715a      	strb	r2, [r3, #5]

        if (watch.second_unit == 10) {
 8000886:	4b4a      	ldr	r3, [pc, #296]	; (80009b0 <formato_hora+0x2c0>)
 8000888:	795b      	ldrb	r3, [r3, #5]
 800088a:	2b0a      	cmp	r3, #10
 800088c:	d000      	beq.n	8000890 <formato_hora+0x1a0>
 800088e:	e081      	b.n	8000994 <formato_hora+0x2a4>
            watch.second_unit = 0; // Reiniciar las unidades de segundo a cero
 8000890:	4b47      	ldr	r3, [pc, #284]	; (80009b0 <formato_hora+0x2c0>)
 8000892:	2200      	movs	r2, #0
 8000894:	715a      	strb	r2, [r3, #5]
            watch.second_decimal++; // Incrementar las decenas de segundo
 8000896:	4b46      	ldr	r3, [pc, #280]	; (80009b0 <formato_hora+0x2c0>)
 8000898:	791b      	ldrb	r3, [r3, #4]
 800089a:	3301      	adds	r3, #1
 800089c:	b2da      	uxtb	r2, r3
 800089e:	4b44      	ldr	r3, [pc, #272]	; (80009b0 <formato_hora+0x2c0>)
 80008a0:	711a      	strb	r2, [r3, #4]

            if (watch.second_decimal == 6) {
 80008a2:	4b43      	ldr	r3, [pc, #268]	; (80009b0 <formato_hora+0x2c0>)
 80008a4:	791b      	ldrb	r3, [r3, #4]
 80008a6:	2b06      	cmp	r3, #6
 80008a8:	d000      	beq.n	80008ac <formato_hora+0x1bc>
 80008aa:	e073      	b.n	8000994 <formato_hora+0x2a4>
                watch.second_decimal = 0; // Reiniciar las decenas de segundo a cero
 80008ac:	4b40      	ldr	r3, [pc, #256]	; (80009b0 <formato_hora+0x2c0>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	711a      	strb	r2, [r3, #4]
                watch.minute_unit++; // Incrementar las unidades de minuto
 80008b2:	4b3f      	ldr	r3, [pc, #252]	; (80009b0 <formato_hora+0x2c0>)
 80008b4:	78db      	ldrb	r3, [r3, #3]
 80008b6:	3301      	adds	r3, #1
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	4b3d      	ldr	r3, [pc, #244]	; (80009b0 <formato_hora+0x2c0>)
 80008bc:	70da      	strb	r2, [r3, #3]

                if (watch.minute_unit == 10) {
 80008be:	4b3c      	ldr	r3, [pc, #240]	; (80009b0 <formato_hora+0x2c0>)
 80008c0:	78db      	ldrb	r3, [r3, #3]
 80008c2:	2b0a      	cmp	r3, #10
 80008c4:	d000      	beq.n	80008c8 <formato_hora+0x1d8>
 80008c6:	e065      	b.n	8000994 <formato_hora+0x2a4>
                    watch.minute_unit = 0; // Reiniciar las unidades de minuto a cero
 80008c8:	4b39      	ldr	r3, [pc, #228]	; (80009b0 <formato_hora+0x2c0>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	70da      	strb	r2, [r3, #3]
                    watch.minute_decimal++; // Incrementar las decenas de minuto
 80008ce:	4b38      	ldr	r3, [pc, #224]	; (80009b0 <formato_hora+0x2c0>)
 80008d0:	789b      	ldrb	r3, [r3, #2]
 80008d2:	3301      	adds	r3, #1
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4b36      	ldr	r3, [pc, #216]	; (80009b0 <formato_hora+0x2c0>)
 80008d8:	709a      	strb	r2, [r3, #2]

                    if (watch.minute_decimal == 6) {
 80008da:	4b35      	ldr	r3, [pc, #212]	; (80009b0 <formato_hora+0x2c0>)
 80008dc:	789b      	ldrb	r3, [r3, #2]
 80008de:	2b06      	cmp	r3, #6
 80008e0:	d158      	bne.n	8000994 <formato_hora+0x2a4>
                        watch.minute_decimal = 0; // Reiniciar las decenas de minuto a cero
 80008e2:	4b33      	ldr	r3, [pc, #204]	; (80009b0 <formato_hora+0x2c0>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	709a      	strb	r2, [r3, #2]
                        watch.hour_unit++; // Incrementar las unidades de hora
 80008e8:	4b31      	ldr	r3, [pc, #196]	; (80009b0 <formato_hora+0x2c0>)
 80008ea:	785b      	ldrb	r3, [r3, #1]
 80008ec:	3301      	adds	r3, #1
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	4b2f      	ldr	r3, [pc, #188]	; (80009b0 <formato_hora+0x2c0>)
 80008f2:	705a      	strb	r2, [r3, #1]

                        if (formato_24_horas == 1) {
 80008f4:	4b30      	ldr	r3, [pc, #192]	; (80009b8 <formato_hora+0x2c8>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d14b      	bne.n	8000994 <formato_hora+0x2a4>
                            // Si es 12:59:00, ajustar a 01:00:00 (AM o PM)
                            if (watch.hour_decimal == 1 && watch.hour_unit == 2 && watch.minute_unit == 5 && watch.minute_decimal == 9) {
 80008fc:	4b2c      	ldr	r3, [pc, #176]	; (80009b0 <formato_hora+0x2c0>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d124      	bne.n	800094e <formato_hora+0x25e>
 8000904:	4b2a      	ldr	r3, [pc, #168]	; (80009b0 <formato_hora+0x2c0>)
 8000906:	785b      	ldrb	r3, [r3, #1]
 8000908:	2b02      	cmp	r3, #2
 800090a:	d120      	bne.n	800094e <formato_hora+0x25e>
 800090c:	4b28      	ldr	r3, [pc, #160]	; (80009b0 <formato_hora+0x2c0>)
 800090e:	78db      	ldrb	r3, [r3, #3]
 8000910:	2b05      	cmp	r3, #5
 8000912:	d11c      	bne.n	800094e <formato_hora+0x25e>
 8000914:	4b26      	ldr	r3, [pc, #152]	; (80009b0 <formato_hora+0x2c0>)
 8000916:	789b      	ldrb	r3, [r3, #2]
 8000918:	2b09      	cmp	r3, #9
 800091a:	d118      	bne.n	800094e <formato_hora+0x25e>
                                if (watch.hour_unit == 2) {
 800091c:	4b24      	ldr	r3, [pc, #144]	; (80009b0 <formato_hora+0x2c0>)
 800091e:	785b      	ldrb	r3, [r3, #1]
 8000920:	2b02      	cmp	r3, #2
 8000922:	d10a      	bne.n	800093a <formato_hora+0x24a>
                                    // Si es 12:59:00 PM, cambiar a 01:00:00 AM
                                    if (watch.hour_decimal == 2) {
 8000924:	4b22      	ldr	r3, [pc, #136]	; (80009b0 <formato_hora+0x2c0>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b02      	cmp	r3, #2
 800092a:	d103      	bne.n	8000934 <formato_hora+0x244>
                                        watch.hour_decimal = 1; // AM
 800092c:	4b20      	ldr	r3, [pc, #128]	; (80009b0 <formato_hora+0x2c0>)
 800092e:	2201      	movs	r2, #1
 8000930:	701a      	strb	r2, [r3, #0]
 8000932:	e002      	b.n	800093a <formato_hora+0x24a>
                                    } else {
                                        // Si es 12:59:00 AM, cambiar a 01:00:00 PM
                                        watch.hour_decimal = 2; // PM
 8000934:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <formato_hora+0x2c0>)
 8000936:	2202      	movs	r2, #2
 8000938:	701a      	strb	r2, [r3, #0]
                                    }
                                }
                                watch.hour_unit = 0; // 1
 800093a:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <formato_hora+0x2c0>)
 800093c:	2200      	movs	r2, #0
 800093e:	705a      	strb	r2, [r3, #1]
                                watch.minute_unit = 0; // 0
 8000940:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <formato_hora+0x2c0>)
 8000942:	2200      	movs	r2, #0
 8000944:	70da      	strb	r2, [r3, #3]
                                watch.minute_decimal = 0; // 0
 8000946:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <formato_hora+0x2c0>)
 8000948:	2200      	movs	r2, #0
 800094a:	709a      	strb	r2, [r3, #2]
 800094c:	e022      	b.n	8000994 <formato_hora+0x2a4>
                            }
                            // Si las horas llegan a 13, cambiar de PM a AM y reiniciar a 1:00
                            else if (watch.hour_unit == 3) {
 800094e:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <formato_hora+0x2c0>)
 8000950:	785b      	ldrb	r3, [r3, #1]
 8000952:	2b03      	cmp	r3, #3
 8000954:	d106      	bne.n	8000964 <formato_hora+0x274>
                                watch.hour_decimal = 0; // AM
 8000956:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <formato_hora+0x2c0>)
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
                                watch.hour_unit = 1; // 1
 800095c:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <formato_hora+0x2c0>)
 800095e:	2201      	movs	r2, #1
 8000960:	705a      	strb	r2, [r3, #1]
                    }
                }
            }
        }
    }
}
 8000962:	e017      	b.n	8000994 <formato_hora+0x2a4>
                            else if (watch.hour_unit == 2 && watch.hour_decimal == 1) {
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <formato_hora+0x2c0>)
 8000966:	785b      	ldrb	r3, [r3, #1]
 8000968:	2b02      	cmp	r3, #2
 800096a:	d107      	bne.n	800097c <formato_hora+0x28c>
 800096c:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <formato_hora+0x2c0>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d103      	bne.n	800097c <formato_hora+0x28c>
                                watch.hour_decimal = 2; // PM
 8000974:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <formato_hora+0x2c0>)
 8000976:	2202      	movs	r2, #2
 8000978:	701a      	strb	r2, [r3, #0]
 800097a:	e00b      	b.n	8000994 <formato_hora+0x2a4>
                            else if (watch.hour_unit == 2 && watch.hour_decimal == 0) {
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <formato_hora+0x2c0>)
 800097e:	785b      	ldrb	r3, [r3, #1]
 8000980:	2b02      	cmp	r3, #2
 8000982:	d107      	bne.n	8000994 <formato_hora+0x2a4>
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <formato_hora+0x2c0>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d103      	bne.n	8000994 <formato_hora+0x2a4>
                                watch.hour_decimal = 2; // PM
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <formato_hora+0x2c0>)
 800098e:	2202      	movs	r2, #2
 8000990:	701a      	strb	r2, [r3, #0]
}
 8000992:	e7ff      	b.n	8000994 <formato_hora+0x2a4>
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	50000400 	.word	0x50000400
 80009a0:	ffff0000 	.word	0xffff0000
 80009a4:	50000800 	.word	0x50000800
 80009a8:	20000020 	.word	0x20000020
 80009ac:	08000b04 	.word	0x08000b04
 80009b0:	20000024 	.word	0x20000024
 80009b4:	20000021 	.word	0x20000021
 80009b8:	20000000 	.word	0x20000000

080009bc <delay_ms>:

void delay_ms(uint16_t n)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	0002      	movs	r2, r0
 80009c4:	1dbb      	adds	r3, r7, #6
 80009c6:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (; n > 0; n--)
 80009c8:	e015      	b.n	80009f6 <delay_ms+0x3a>
    {
        for (i = 0; i < 140; i++)
 80009ca:	230e      	movs	r3, #14
 80009cc:	18fb      	adds	r3, r7, r3
 80009ce:	2200      	movs	r2, #0
 80009d0:	801a      	strh	r2, [r3, #0]
 80009d2:	e006      	b.n	80009e2 <delay_ms+0x26>
        {
            // Pequeño retraso para lograr una pausa de 1 ms aproximadamente
            asm("NOP");
 80009d4:	46c0      	nop			; (mov r8, r8)
        for (i = 0; i < 140; i++)
 80009d6:	210e      	movs	r1, #14
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	881a      	ldrh	r2, [r3, #0]
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	3201      	adds	r2, #1
 80009e0:	801a      	strh	r2, [r3, #0]
 80009e2:	230e      	movs	r3, #14
 80009e4:	18fb      	adds	r3, r7, r3
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	2b8b      	cmp	r3, #139	; 0x8b
 80009ea:	d9f3      	bls.n	80009d4 <delay_ms+0x18>
    for (; n > 0; n--)
 80009ec:	1dbb      	adds	r3, r7, #6
 80009ee:	881a      	ldrh	r2, [r3, #0]
 80009f0:	1dbb      	adds	r3, r7, #6
 80009f2:	3a01      	subs	r2, #1
 80009f4:	801a      	strh	r2, [r3, #0]
 80009f6:	1dbb      	adds	r3, r7, #6
 80009f8:	881b      	ldrh	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d1e5      	bne.n	80009ca <delay_ms+0xe>
        }
    }
}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	b004      	add	sp, #16
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <decoder>:

uint8_t decoder(uint8_t value_to_decode)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	0002      	movs	r2, r0
 8000a10:	1dfb      	adds	r3, r7, #7
 8000a12:	701a      	strb	r2, [r3, #0]
    if (value_to_decode < 10)
 8000a14:	1dfb      	adds	r3, r7, #7
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b09      	cmp	r3, #9
 8000a1a:	d804      	bhi.n	8000a26 <decoder+0x1e>
    {
        return decoder_table[value_to_decode];
 8000a1c:	1dfb      	adds	r3, r7, #7
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	4a03      	ldr	r2, [pc, #12]	; (8000a30 <decoder+0x28>)
 8000a22:	5cd3      	ldrb	r3, [r2, r3]
 8000a24:	e000      	b.n	8000a28 <decoder+0x20>
    }
    else
    {
        // Manejar el caso de un valor fuera de rango
        return 0; // O cualquier otro valor de retorno que desees para indicar un error
 8000a26:	2300      	movs	r3, #0
    }
}
 8000a28:	0018      	movs	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	b002      	add	sp, #8
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	08000af8 	.word	0x08000af8

08000a34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a34:	480d      	ldr	r0, [pc, #52]	; (8000a6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a36:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a38:	e000      	b.n	8000a3c <Reset_Handler+0x8>
 8000a3a:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a3c:	480c      	ldr	r0, [pc, #48]	; (8000a70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a3e:	490d      	ldr	r1, [pc, #52]	; (8000a74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a40:	4a0d      	ldr	r2, [pc, #52]	; (8000a78 <LoopForever+0xe>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a44:	e002      	b.n	8000a4c <LoopCopyDataInit>

08000a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4a:	3304      	adds	r3, #4

08000a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a50:	d3f9      	bcc.n	8000a46 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a52:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a54:	4c0a      	ldr	r4, [pc, #40]	; (8000a80 <LoopForever+0x16>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a58:	e001      	b.n	8000a5e <LoopFillZerobss>

08000a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a5c:	3204      	adds	r2, #4

08000a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a60:	d3fb      	bcc.n	8000a5a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a62:	f000 f811 	bl	8000a88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a66:	f7ff fc0f 	bl	8000288 <main>

08000a6a <LoopForever>:

LoopForever:
  b LoopForever
 8000a6a:	e7fe      	b.n	8000a6a <LoopForever>
  ldr   r0, =_estack
 8000a6c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a74:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000a78:	08000b24 	.word	0x08000b24
  ldr r2, =_sbss
 8000a7c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000a80:	2000002c 	.word	0x2000002c

08000a84 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a84:	e7fe      	b.n	8000a84 <ADC_COMP_IRQHandler>
	...

08000a88 <__libc_init_array>:
 8000a88:	b570      	push	{r4, r5, r6, lr}
 8000a8a:	2600      	movs	r6, #0
 8000a8c:	4c0c      	ldr	r4, [pc, #48]	; (8000ac0 <__libc_init_array+0x38>)
 8000a8e:	4d0d      	ldr	r5, [pc, #52]	; (8000ac4 <__libc_init_array+0x3c>)
 8000a90:	1b64      	subs	r4, r4, r5
 8000a92:	10a4      	asrs	r4, r4, #2
 8000a94:	42a6      	cmp	r6, r4
 8000a96:	d109      	bne.n	8000aac <__libc_init_array+0x24>
 8000a98:	2600      	movs	r6, #0
 8000a9a:	f000 f819 	bl	8000ad0 <_init>
 8000a9e:	4c0a      	ldr	r4, [pc, #40]	; (8000ac8 <__libc_init_array+0x40>)
 8000aa0:	4d0a      	ldr	r5, [pc, #40]	; (8000acc <__libc_init_array+0x44>)
 8000aa2:	1b64      	subs	r4, r4, r5
 8000aa4:	10a4      	asrs	r4, r4, #2
 8000aa6:	42a6      	cmp	r6, r4
 8000aa8:	d105      	bne.n	8000ab6 <__libc_init_array+0x2e>
 8000aaa:	bd70      	pop	{r4, r5, r6, pc}
 8000aac:	00b3      	lsls	r3, r6, #2
 8000aae:	58eb      	ldr	r3, [r5, r3]
 8000ab0:	4798      	blx	r3
 8000ab2:	3601      	adds	r6, #1
 8000ab4:	e7ee      	b.n	8000a94 <__libc_init_array+0xc>
 8000ab6:	00b3      	lsls	r3, r6, #2
 8000ab8:	58eb      	ldr	r3, [r5, r3]
 8000aba:	4798      	blx	r3
 8000abc:	3601      	adds	r6, #1
 8000abe:	e7f2      	b.n	8000aa6 <__libc_init_array+0x1e>
 8000ac0:	08000b1c 	.word	0x08000b1c
 8000ac4:	08000b1c 	.word	0x08000b1c
 8000ac8:	08000b20 	.word	0x08000b20
 8000acc:	08000b1c 	.word	0x08000b1c

08000ad0 <_init>:
 8000ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ad6:	bc08      	pop	{r3}
 8000ad8:	469e      	mov	lr, r3
 8000ada:	4770      	bx	lr

08000adc <_fini>:
 8000adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ae2:	bc08      	pop	{r3}
 8000ae4:	469e      	mov	lr, r3
 8000ae6:	4770      	bx	lr
